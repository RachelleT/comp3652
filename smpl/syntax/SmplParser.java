
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 28 21:52:08 EST 2018
//----------------------------------------------------

package smpl.syntax;

import smpl.semantics.*;
import java_cup.runtime.*;
import java.io.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 28 21:52:08 EST 2018
  */
public class SmplParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SmplParser() {super();}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SmplParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\064\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\016\010\000\002\021\005" +
    "\000\002\017\004\000\002\017\003\000\002\020\005\000" +
    "\002\020\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\005\000\002\005" +
    "\005\000\002\006\011\000\002\010\003\000\002\010\003" +
    "\000\002\007\005\000\002\007\006\000\002\007\003\000" +
    "\002\007\004\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\014\004\000\002\014\012\000\002\012" +
    "\006\000\002\012\005\000\002\013\003\000\002\013\003" +
    "\000\002\011\005\000\002\011\003\000\002\015\010\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\003\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\005\000\002\026\003\000\002" +
    "\027\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\022\004\012\010\017\011\022\012\006\022" +
    "\021\023\011\035\024\036\010\001\002\000\010\002\ufff5" +
    "\007\ufff5\027\ufff5\001\002\000\034\002\uffea\005\uffea\006" +
    "\uffea\007\uffea\014\105\015\106\024\uffea\027\uffea\030\117" +
    "\031\120\032\121\033\122\034\123\001\002\000\004\004" +
    "\143\001\002\000\010\002\ufff7\007\ufff7\027\ufff7\001\002" +
    "\000\046\002\uffd1\004\131\005\uffd1\006\uffd1\007\uffd1\014" +
    "\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\024\uffd1\025\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\001" +
    "\002\000\012\004\012\012\006\035\024\036\010\001\002" +
    "\000\012\004\012\012\006\035\024\036\010\001\002\000" +
    "\004\002\102\001\002\000\010\002\ufff4\007\ufff4\027\ufff4" +
    "\001\002\000\044\002\uffd3\005\uffd3\006\uffd3\007\uffd3\014" +
    "\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\024\uffd3\025\uffd3" +
    "\027\uffd3\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\001" +
    "\002\000\010\002\ufff6\007\ufff6\027\ufff6\001\002\000\004" +
    "\036\077\001\002\000\044\002\uffd7\005\uffd7\006\uffd7\007" +
    "\uffd7\014\uffd7\015\uffd7\016\072\017\073\020\071\024\uffd7" +
    "\025\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034" +
    "\uffd7\001\002\000\004\004\052\001\002\000\004\004\033" +
    "\001\002\000\044\002\uffcf\005\uffcf\006\uffcf\007\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\024\uffcf\025\uffcf" +
    "\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\001" +
    "\002\000\044\002\uffd2\005\uffd2\006\uffd2\007\uffd2\014\uffd2" +
    "\015\uffd2\016\uffd2\017\uffd2\020\uffd2\024\uffd2\025\uffd2\027" +
    "\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\001\002" +
    "\000\016\002\uffe8\005\uffe8\006\uffe8\007\uffe8\024\uffe8\027" +
    "\uffe8\001\002\000\010\002\ufffe\007\ufffe\027\ufffe\001\002" +
    "\000\006\002\001\007\031\001\002\000\016\002\uffe9\005" +
    "\uffe9\006\uffe9\007\uffe9\024\uffe9\027\uffe9\001\002\000\022" +
    "\004\012\010\017\011\022\012\006\022\021\023\011\035" +
    "\024\036\010\001\002\000\010\002\uffff\007\uffff\027\uffff" +
    "\001\002\000\010\005\uffce\013\037\036\040\001\002\000" +
    "\006\005\ufff0\006\046\001\002\000\004\005\042\001\002" +
    "\000\004\005\uffef\001\002\000\004\036\041\001\002\000" +
    "\006\005\uffec\006\uffec\001\002\000\006\005\uffeb\006\uffeb" +
    "\001\002\000\004\026\043\001\002\000\022\004\012\010" +
    "\017\011\022\012\006\022\021\023\011\035\024\036\010" +
    "\001\002\000\006\007\031\027\045\001\002\000\010\002" +
    "\ufff1\007\ufff1\027\ufff1\001\002\000\006\013\047\036\050" +
    "\001\002\000\004\036\051\001\002\000\006\005\uffee\006" +
    "\uffee\001\002\000\006\005\uffed\006\uffed\001\002\000\006" +
    "\005\uffce\036\056\001\002\000\004\005\ufffa\001\002\000" +
    "\006\005\uffce\006\064\001\002\000\004\005\061\001\002" +
    "\000\004\021\057\001\002\000\014\004\012\012\006\023" +
    "\011\035\024\036\010\001\002\000\006\005\ufffc\006\ufffc" +
    "\001\002\000\022\004\012\010\017\011\022\012\006\022" +
    "\021\023\011\035\024\036\010\001\002\000\004\007\063" +
    "\001\002\000\030\002\ufffd\004\012\007\ufffd\010\017\011" +
    "\022\012\006\022\021\023\011\027\ufffd\035\024\036\010" +
    "\001\002\000\004\036\056\001\002\000\004\005\ufff8\001" +
    "\002\000\004\005\ufffb\001\002\000\006\005\uffce\006\064" +
    "\001\002\000\004\005\ufff9\001\002\000\012\004\012\012" +
    "\006\035\024\036\010\001\002\000\012\004\012\012\006" +
    "\035\024\036\010\001\002\000\012\004\012\012\006\035" +
    "\024\036\010\001\002\000\044\002\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5\020\uffd5\024" +
    "\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\034\uffd5\001\002\000\044\002\uffd6\005\uffd6\006\uffd6\007" +
    "\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\024\uffd6" +
    "\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\034" +
    "\uffd6\001\002\000\044\002\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\024\uffd4\025" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\001\002\000\016\004\012\011\022\012\006\023\011\035" +
    "\024\036\010\001\002\000\010\002\ufff2\007\ufff2\027\ufff2" +
    "\001\002\000\010\002\ufff3\007\ufff3\027\ufff3\001\002\000" +
    "\004\002\000\001\002\000\010\005\104\014\105\015\106" +
    "\001\002\000\044\002\uffd0\005\uffd0\006\uffd0\007\uffd0\014" +
    "\uffd0\015\uffd0\016\uffd0\017\uffd0\020\uffd0\024\uffd0\025\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\001" +
    "\002\000\012\004\012\012\006\035\024\036\010\001\002" +
    "\000\012\004\012\012\006\035\024\036\010\001\002\000" +
    "\044\002\uffd8\005\uffd8\006\uffd8\007\uffd8\014\uffd8\015\uffd8" +
    "\016\072\017\073\020\071\024\uffd8\025\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\001\002\000\044" +
    "\002\uffd9\005\uffd9\006\uffd9\007\uffd9\014\uffd9\015\uffd9\016" +
    "\072\017\073\020\071\024\uffd9\025\uffd9\027\uffd9\030\uffd9" +
    "\031\uffd9\032\uffd9\033\uffd9\034\uffd9\001\002\000\020\014" +
    "\105\015\106\030\117\031\120\032\121\033\122\034\123" +
    "\001\002\000\004\025\113\001\002\000\014\004\012\012" +
    "\006\023\011\035\024\036\010\001\002\000\004\024\115" +
    "\001\002\000\014\004\012\012\006\023\011\035\024\036" +
    "\010\001\002\000\016\002\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\024\uffdf\027\uffdf\001\002\000\012\004\012\012\006\035" +
    "\024\036\010\001\002\000\012\004\012\012\006\035\024" +
    "\036\010\001\002\000\012\004\012\012\006\035\024\036" +
    "\010\001\002\000\012\004\012\012\006\035\024\036\010" +
    "\001\002\000\012\004\012\012\006\035\024\036\010\001" +
    "\002\000\024\002\uffdb\005\uffdb\006\uffdb\007\uffdb\014\105" +
    "\015\106\024\uffdb\025\uffdb\027\uffdb\001\002\000\024\002" +
    "\uffdc\005\uffdc\006\uffdc\007\uffdc\014\105\015\106\024\uffdc" +
    "\025\uffdc\027\uffdc\001\002\000\024\002\uffdd\005\uffdd\006" +
    "\uffdd\007\uffdd\014\105\015\106\024\uffdd\025\uffdd\027\uffdd" +
    "\001\002\000\024\002\uffde\005\uffde\006\uffde\007\uffde\014" +
    "\105\015\106\024\uffde\025\uffde\027\uffde\001\002\000\024" +
    "\002\uffda\005\uffda\006\uffda\007\uffda\014\105\015\106\024" +
    "\uffda\025\uffda\027\uffda\001\002\000\014\004\012\012\006" +
    "\023\011\035\024\036\010\001\002\000\046\002\uffe7\004" +
    "\133\005\uffe7\006\uffe7\007\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\024\uffe7\025\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\032\uffe7\033\uffe7\034\uffe7\001\002\000\014\004\012" +
    "\012\006\023\011\035\024\036\010\001\002\000\006\005" +
    "\uffe0\006\uffe0\001\002\000\006\005\137\006\136\001\002" +
    "\000\014\004\012\012\006\023\011\035\024\036\010\001" +
    "\002\000\046\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\024\uffe5\025" +
    "\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5" +
    "\001\002\000\006\005\uffe1\006\uffe1\001\002\000\006\005" +
    "\142\006\136\001\002\000\046\002\uffe4\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4" +
    "\033\uffe4\034\uffe4\001\002\000\004\036\144\001\002\000" +
    "\004\006\145\001\002\000\004\004\146\001\002\000\014" +
    "\004\012\012\006\023\011\035\024\036\010\001\002\000" +
    "\006\005\150\006\136\001\002\000\004\005\151\001\002" +
    "\000\044\002\uffe6\005\uffe6\006\uffe6\007\uffe6\014\uffe6\015" +
    "\uffe6\016\uffe6\017\uffe6\020\uffe6\024\uffe6\025\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\147\000\034\002\012\003\026\004\025\005\006\006" +
    "\003\014\022\015\024\016\015\022\013\023\027\024\004" +
    "\025\017\026\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\131" +
    "\001\001\000\014\014\022\023\111\024\110\025\017\026" +
    "\014\001\001\000\012\014\022\024\102\025\017\026\014" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\031\005\006\006" +
    "\003\014\022\015\024\016\015\022\013\023\027\024\004" +
    "\025\017\026\014\001\001\000\002\001\001\000\010\007" +
    "\033\010\034\027\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\043" +
    "\004\025\005\006\006\003\014\022\015\024\016\015\022" +
    "\013\023\027\024\004\025\017\026\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\017\054" +
    "\021\053\027\052\001\001\000\002\001\001\000\006\020" +
    "\065\027\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\014\022\015\024\022\057\023\027\024\004\025" +
    "\017\026\014\001\001\000\002\001\001\000\032\003\061" +
    "\004\025\005\006\006\003\014\022\015\024\016\015\022" +
    "\013\023\027\024\004\025\017\026\014\001\001\000\002" +
    "\001\001\000\030\004\031\005\006\006\003\014\022\015" +
    "\024\016\015\022\013\023\027\024\004\025\017\026\014" +
    "\001\001\000\004\021\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\067\027\064\001\001\000\002" +
    "\001\001\000\006\014\022\026\075\001\001\000\006\014" +
    "\022\026\074\001\001\000\006\014\022\026\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\006\077\014\022\015\024\022\100\023\027\024\004" +
    "\025\017\026\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\014\022\025\107\026\014\001\001\000\010\014" +
    "\022\025\106\026\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\014" +
    "\022\015\024\022\113\023\027\024\004\025\017\026\014" +
    "\001\001\000\002\001\001\000\020\014\022\015\024\022" +
    "\115\023\027\024\004\025\017\026\014\001\001\000\002" +
    "\001\001\000\012\014\022\024\127\025\017\026\014\001" +
    "\001\000\012\014\022\024\126\025\017\026\014\001\001" +
    "\000\012\014\022\024\125\025\017\026\014\001\001\000" +
    "\012\014\022\024\124\025\017\026\014\001\001\000\012" +
    "\014\022\024\123\025\017\026\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\011\140\014\022\015\024\022" +
    "\133\023\027\024\004\025\017\026\014\001\001\000\002" +
    "\001\001\000\022\011\134\014\022\015\024\022\133\023" +
    "\027\024\004\025\017\026\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\014\022\015\024\022\137\023" +
    "\027\024\004\025\017\026\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\011\146\014\022\015\024\022\133\023\027\024\004\025" +
    "\017\026\014\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SmplParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SmplParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SmplParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

		// Create a lexer that reads from
		// supplied input stream or standard input
		if (in == null)
		   in = new InputStreamReader(System.in);
		lexer = new SmplLexer(in);
	  
    }


		SmplLexer lexer;

		InputStreamReader in = null;

		public SmplParser(InputStream is) {
	        	in = new InputStreamReader(is);
		}

		public void report_error(String message, Object info) {
		    System.err.println(message);
		}

		public void syntax_error(Symbol cur_token) {
		    System.err.print("Line " + lexer.getLine() +
				     " near char " + lexer.getChar() + ": ");
		    report_error("Syntax error", cur_token);
		    System.err.println ("Last token read is " +
					 lexer.getText());
		}
	    
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SmplParser$actions {
  private final SmplParser parser;

  /** Constructor */
  CUP$SmplParser$actions(SmplParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SmplParser$do_action(
    int                        CUP$SmplParser$act_num,
    java_cup.runtime.lr_parser CUP$SmplParser$parser,
    java.util.Stack            CUP$SmplParser$stack,
    int                        CUP$SmplParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SmplParser$result;

      /* select the action based on the action number */
      switch (CUP$SmplParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // empty ::= 
            {
              Object RESULT =null;

              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("empty",21, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= funCall 
            {
              IRExp RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpFunCall fc = (IRExpFunCall)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = fc; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= LPAREN arithExp RPAREN 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= VARIABLE 
            {
              IRExp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpVar(var); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // factor ::= INTEGER 
            {
              IRExp RESULT =null;
		int ilitleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int ilitright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Integer ilit = (Integer)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLit(ilit); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // term ::= factor 
            {
              IRExp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = f; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // term ::= term MOD factor 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new IRExpMod(t, f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // term ::= term DIV factor 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new IRExpDiv(t, f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // term ::= term MUL factor 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp f = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new IRExpMul(t, f); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arithExp ::= term 
            {
              IRExp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = t; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arithExp ::= arithExp MINUS term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new IRExpSub(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // arithExp ::= arithExp PLUS term 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp t = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
			RESULT = new IRExpAdd(e, t); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("arithExp",18, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // comparison ::= arithExp EQ arithExp 
            {
              IRExp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp x = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpEq(x,e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("comparison",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comparison ::= arithExp GE arithExp 
            {
              IRExp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp x = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpGe(x,e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("comparison",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comparison ::= arithExp LE arithExp 
            {
              IRExp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp x = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLe(x,e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("comparison",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comparison ::= arithExp GT arithExp 
            {
              IRExp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp x = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpGt(x,e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("comparison",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // comparison ::= arithExp LT arithExp 
            {
              IRExp RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp x = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpLt(x,e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("comparison",17, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ifexpr ::= IF comparison THEN expression ELSE expression 
            {
              IRExpIf RESULT =null;
		int predleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int predright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		IRExp pred = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int conseqleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int conseqright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		IRExp conseq = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int altleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int altright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp alt = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpIf(pred, conseq, alt); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("ifexpr",11, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expList ::= expression 
            {
              ArrayList<IRExp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
	         ArrayList<IRExp> lst = new ArrayList<>();
		 lst.add(e);
		 RESULT = lst;
	    
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expList",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expList ::= expList COMMA expression 
            {
              ArrayList<IRExp> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<IRExp> el = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
	    	       el.add(e);
 		       RESULT = el;
	    
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expList",7, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expListE ::= empty 
            {
              ArrayList<IRExp> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expListE",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expListE ::= expList 
            {
              ArrayList<IRExp> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<IRExp> el = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = el; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expListE",9, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // argsList ::= LPAREN expList RPAREN 
            {
              ArrayList<IRExp> RESULT =null;
		int elstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> elst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = elst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argsList",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // argsList ::= argsList LPAREN expList RPAREN 
            {
              ArrayList<IRExp> RESULT =null;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		ArrayList<IRExp> elst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 alst.addAll(elst); RESULT = alst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("argsList",8, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funCall ::= CALL LPAREN VARIABLE COMMA LPAREN expList RPAREN RPAREN 
            {
              IRExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)).value;
		int elstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int elstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<IRExp> elst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		 RESULT = new IRExpFunCall(v, elst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("funCall",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-7)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funCall ::= VARIABLE argsList 
            {
              IRExpFunCall RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int alstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int alstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<IRExp> alst = (ArrayList<IRExp>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new IRExpFunCall(v,alst); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("funCall",10, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= ifexpr 
            {
              IRExp RESULT =null;
		int ifeleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int iferight = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExpIf ife = (IRExpIf)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = ife; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= comparison 
            {
              IRExp RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp c = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = c; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= arithExp 
            {
              IRExp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = e; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("expression",16, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramList ::= LAZY VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 ArrayList<String> lazylst = new ArrayList<>();
	     		lazylst.add("lazy" + v);
	     		RESULT = lazylst; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramList ::= VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
	          ArrayList<String> lst = new ArrayList<>();
		  lst.add(v);
	          RESULT = lst;
	      	       
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramList ::= paramList COMMA LAZY VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
	          pl.add("lazy" + v);
		  RESULT = pl;
	      
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramList ::= paramList COMMA VARIABLE 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
	          pl.add(v);
		  RESULT = pl;
	      
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramList",5, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramListE ::= empty 
            {
              ArrayList<String> RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListE",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramListE ::= paramList 
            {
              ArrayList<String> RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = pl; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("paramListE",6, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funDefn ::= PROC LPAREN paramListE RPAREN LBRACE stmtList RBRACE 
            {
              StmtFunDefn RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).right;
		ArrayList<String> pl = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		
		   RESULT = new StmtFunDefn(pl, body);
	    
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("funDefn",4, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-6)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // definition ::= FUNDEF VARIABLE funDefn 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int fnleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtFunDefn fn = (StmtFunDefn)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtDefinition(v,fn); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // definition ::= FUNDEF VARIABLE expression 
            {
              StmtDefinition RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtDefinition(v,e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("definition",3, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= expression 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new StmtExpr(e); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // stmt ::= funDefn 
            {
              Statement RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtFunDefn fd = (StmtFunDefn)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = fd; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // stmt ::= letStmt 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtLet l = (StmtLet)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = l; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // stmt ::= definition 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtDefinition d = (StmtDefinition)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = d; 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bindingsAux ::= empty 
            {
              ArrayList RESULT =null;
		
		RESULT = new ArrayList<>();
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bindingsAux ::= COMMA binding bindingsAux 
            {
              ArrayList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList bl = (ArrayList)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
	     	       bl.add(b);
	     	       RESULT = bl;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindingsAux",14, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bindings ::= empty 
            {
              ArrayList RESULT =null;
		 RESULT = new ArrayList<>(); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindings",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // bindings ::= binding bindingsAux 
            {
              ArrayList RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		Binding b = (Binding)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		ArrayList bl = (ArrayList)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
	    	  bl.add(b);
		  RESULT = bl;
	     
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("bindings",13, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // binding ::= VARIABLE ASSIGN expression 
            {
              Binding RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		IRExp e = (IRExp)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new Binding(v, e);
	
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("binding",15, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // letStmt ::= LET LPAREN bindings RPAREN stmtList SEMI 
            {
              StmtLet RESULT =null;
		int bsleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).left;
		int bsright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).right;
		ArrayList bs = (ArrayList)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		StmtSequence body = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		 RESULT = new StmtLet(bs,body); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("letStmt",12, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-5)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmtList ::= stmt 
            {
              StmtSequence RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		RESULT = new StmtSequence(s);
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmtList ::= stmtList SEMI stmt 
            {
              StmtSequence RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).right;
		StmtSequence lst = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		
		lst.add(s); 
		RESULT = lst;
		
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("stmtList",1, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-2)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).right;
		SmplProgram start_val = (SmplProgram)((java_cup.runtime.Symbol) CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)).value;
		RESULT = start_val;
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.elementAt(CUP$SmplParser$top-1)), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SmplParser$parser.done_parsing();
          return CUP$SmplParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmtList 
            {
              SmplProgram RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()).right;
		StmtSequence s = (StmtSequence)((java_cup.runtime.Symbol) CUP$SmplParser$stack.peek()).value;
		 RESULT = new SmplProgram(s); 
              CUP$SmplParser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SmplParser$stack.peek()), RESULT);
            }
          return CUP$SmplParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

